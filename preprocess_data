import pandas as pd


def preprocess_data(filename="scraped_data.csv", columns=None):
    """
    Preprocess data from a CSV file by converting timestamp to datetime and extracting time components.

    Args:
        filename (str): The name of the CSV file to read. Default is "scraped_data.csv".
        columns (list): List of column names for the DataFrame. If None, default column names will be used.

    Returns:
        pd.DataFrame: Preprocessed DataFrame with extracted time components.
    """
    if columns is None:
        # Default columns based on a typical structure [timestamp, keyword, content]
        columns = ["timestamp", "url", "keyword", "scraped_content"]

    # Read the CSV file with the given column names
    df = pd.read_csv(filename, names=columns, header=0)

    # Convert timestamp to datetime
    if 'timestamp' in df.columns:
        df['timestamp'] = pd.to_datetime(df['timestamp'])

        # Extract additional time components if the timestamp column is present
        df['hour'] = df['timestamp'].dt.hour
        df['day'] = df['timestamp'].dt.day
        df['weekday'] = df['timestamp'].dt.weekday
        df['month'] = df['timestamp'].dt.month
        df['year'] = df['timestamp'].dt.year

    return df


if __name__ == "__main__":
    # Example usage: provide custom column names based on the scraped data
    column_names = ["timestamp", "url", "keyword", "scraped_content"]
    df = preprocess_data(filename="scraped_data.csv", columns=column_names)
    print(df.head())
